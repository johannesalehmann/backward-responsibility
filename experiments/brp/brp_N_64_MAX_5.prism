// bounded retransmission protocol [D'AJJL01]
// gxn/dxp 23/05/2001

mdp

// number of chunks
const int N=64;
// maximum number of retransmissions
const int MAX=5;

label "sbar" = s=5;
label "N0" = i=0;
label "N1" = i=1;
label "N2" = i=2;
label "N3" = i=3;
label "N4" = i=4;
label "N5" = i=5;
label "N6" = i=6;
label "N7" = i=7;
label "N8" = i=8;
label "N9" = i=9;
label "N10" = i=10;
label "N11" = i=11;
label "N12" = i=12;
label "N13" = i=13;
label "N14" = i=14;
label "N15" = i=15;
label "N16" = i=16;
label "N17" = i=17;
label "N18" = i=18;
label "N19" = i=19;
label "N20" = i=20;
label "N21" = i=21;
label "N22" = i=22;
label "N23" = i=23;
label "N24" = i=24;
label "N25" = i=25;
label "N26" = i=26;
label "N27" = i=27;
label "N28" = i=28;
label "N29" = i=29;
label "N30" = i=30;
label "N31" = i=31;
label "N32" = i=32;
label "N33" = i=33;
label "N34" = i=34;
label "N35" = i=35;
label "N36" = i=36;
label "N37" = i=37;
label "N38" = i=38;
label "N39" = i=39;
label "N40" = i=40;
label "N41" = i=41;
label "N42" = i=42;
label "N43" = i=43;
label "N44" = i=44;
label "N45" = i=45;
label "N46" = i=46;
label "N47" = i=47;
label "N48" = i=48;
label "N49" = i=49;
label "N50" = i=50;
label "N51" = i=51;
label "N52" = i=52;
label "N53" = i=53;
label "N54" = i=54;
label "N55" = i=55;
label "N56" = i=56;
label "N57" = i=57;
label "N58" = i=58;
label "N59" = i=59;
label "N60" = i=60;
label "N61" = i=61;
label "N62" = i=62;
label "N63" = i=63;
label "N64" = i=64;


module sender

	s : [0..6];
	// 0 idle
	// 1 next_frame
	// 2 wait_ack
	// 3 retransmit
	// 4 success
	// 5 error
	// 6 wait sync
	srep : [0..3];
	// 0 bottom
	// 1 not ok (nok)
	// 2 do not know (dk)
	// 3 ok (ok)
	nrtr : [0..MAX];
	i : [0..N];
	bs : bool;
	s_ab : bool;
	fs : bool;
	ls : bool;

	// idle
	[NewFile] (s=0) -> (s'=1) & (i'=1) & (srep'=0);
	// next_frame
	[aF] (s=1) -> (s'=2) & (fs'=(i=1)) & (ls'=(i=N)) & (bs'=s_ab) & (nrtr'=0);
	// wait_ack
	[aB] (s=2) -> (s'=4) & (s_ab'=!s_ab);
	[TO_Msg] (s=2) -> (s'=3);
	[TO_Ack] (s=2) -> (s'=3);
	// retransmit
	[aF] (s=3) & (nrtr<MAX) -> (s'=2) & (fs'=(i=1)) & (ls'=(i=N)) & (bs'=s_ab) & (nrtr'=nrtr+1);
	[] (s=3) & (nrtr=MAX) & (i<N) -> (s'=5) & (srep'=1);
	[] (s=3) & (nrtr=MAX) & (i=N) -> (s'=5) & (srep'=2);
	// success
	[] (s=4) & (i<N) -> (s'=1) & (i'=i+1);
	[] (s=4) & (i=N) -> (s'=0) & (srep'=3);
	// error
	[SyncWait] (s=5) -> (s'=6);
	// wait sync
	[SyncWait] (s=6) -> (s'=0) & (s_ab'=false);

endmodule

module receiver

	r : [0..5];
	// 0 new_file
	// 1 fst_safe
	// 2 frame_received
	// 3 frame_reported
	// 4 idle
	// 5 resync
	rrep : [0..4];
	// 0 bottom
	// 1 fst
	// 2 inc
	// 3 ok
	// 4 nok
	fr : bool;
	lr : bool;
	br : bool;
	r_ab : bool;
	recv : bool;


	// new_file
	[SyncWait] (r=0) -> (r'=0);
	[aG] (r=0) -> (r'=1) & (fr'=fs) & (lr'=ls) & (br'=bs) & (recv'=T);
	// fst_safe_frame
	[] (r=1) -> (r'=2) & (r_ab'=br);
	// frame_received
	[] (r=2) & (r_ab=br) & (fr=true) & (lr=false)  -> (r'=3) & (rrep'=1);
	[] (r=2) & (r_ab=br) & (fr=false) & (lr=false) -> (r'=3) & (rrep'=2);
	[] (r=2) & (r_ab=br) & (fr=false) & (lr=true)  -> (r'=3) & (rrep'=3);
	[aA] (r=2) & !(r_ab=br) -> (r'=4);
	// frame_reported
	[aA] (r=3) -> (r'=4) & (r_ab'=!r_ab);
	// idle
	[aG] (r=4) -> (r'=2) & (fr'=fs) & (lr'=ls) & (br'=bs) & (recv'=T);
	[SyncWait] (r=4) & (ls=true) -> (r'=5);
	[SyncWait] (r=4) & (ls=false) -> (r'=5) & (rrep'=4);
	// resync
	[SyncWait] (r=5) -> (r'=0) & (rrep'=0);

endmodule

module checker

	T : bool;

//	[NewFile] (T=false) -> (T'=false);
	[NewFile] (T=false) -> (T'=true);

endmodule

module	channelK

	k : [0..2];

	// idle
	[aF] (k=0) -> (k'=1);
	[aF] (k=0) -> (k'=2);
	// sending
	[aG] (k=1) -> (k'=0);
	// lost
	[TO_Msg] (k=2) -> (k'=0);

endmodule

module	channelL

	l : [0..2];

	// idle
	[aA] (l=0) -> (l'=1);
	[aA] (l=0) -> (l'=2);
	// sending
	[aB] (l=1) -> (l'=0);
	// lost
	[TO_Ack] (l=2) -> (l'=0);

endmodule
